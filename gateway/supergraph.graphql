schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Article
  @join__type(graph: ARTICLES)
{
  content: String
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  userId: Int
}

type Book
  @join__type(graph: USERS)
{
  title: String!
}

"""Autogenerated input type of CreateArticle"""
input CreateArticleInput
  @join__type(graph: ARTICLES)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  content: String!
  userId: Int!
}

"""Autogenerated return type of CreateArticle."""
type CreateArticlePayload
  @join__type(graph: ARTICLES)
{
  article: Article!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
}

"""Autogenerated input type of CreateUser"""
input CreateUserInput
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
  name: String!
}

"""Autogenerated return type of CreateUser."""
type CreateUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  user: User!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime
  @join__type(graph: ARTICLES)
  @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

scalar join__FieldSet

enum join__Graph {
  ARTICLES @join__graph(name: "articles", url: "http://localhost:3001/graphql")
  USERS @join__graph(name: "users", url: "http://localhost:3000/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: ARTICLES)
  @join__type(graph: USERS)
{
  createArticle(
    """Parameters for CreateArticle"""
    input: CreateArticleInput!
  ): CreateArticlePayload @join__field(graph: ARTICLES)
  createUser(
    """Parameters for CreateUser"""
    input: CreateUserInput!
  ): CreateUserPayload @join__field(graph: USERS)
}

type Query
  @join__type(graph: ARTICLES)
  @join__type(graph: USERS)
{
  article(id: ID!): Article! @join__field(graph: ARTICLES)
  articles: [Article!]! @join__field(graph: ARTICLES)
  user(id: ID!): User! @join__field(graph: USERS)
  users: [User!]! @join__field(graph: USERS)
}

type User
  @join__type(graph: USERS, key: "id", extension: true)
{
  books: [Book!]
  booksCount: Int
  email: String
  id: ID!
  name: String
}
